generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model answers {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attempt_id     String    @db.Uuid
  question_id    String    @db.Uuid
  content        Json
  is_correct     Boolean?
  score_obtained Float     @db.Real
  flag           Boolean?  @default(false)
  attempt        attempts  @relation(fields: [attempt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  question       questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attempt_sections {
  attempt_id   String    @db.Uuid
  section_id   String    @db.Uuid
  started_at   DateTime  @default(now()) @db.Timestamptz(6)
  completed_at DateTime? @db.Timestamptz(6)
  grade        Float?    @db.Real
  attempt      attempts  @relation(fields: [attempt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  section      sections  @relation(fields: [section_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([attempt_id, section_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attempts {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  started_at       DateTime           @default(now()) @db.Timestamptz(6)
  complete_at      DateTime?          @db.Timestamptz(6)
  profile_id       String             @db.Uuid
  exam_id          String             @db.Uuid
  total            Float?             @db.Real
  answers          answers[]
  attempt_sections attempt_sections[]
  exam             exams              @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile          profiles           @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model exams {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  modified_at DateTime   @default(now()) @db.Timestamptz(6)
  profile_id  String     @db.Uuid
  title       String
  description String?
  deleted_at  DateTime?  @db.Timestamptz(6)
  attempts    attempts[]
  profile     profiles   @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sections    sections[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model options {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_id   String    @db.Uuid
  content       String?
  is_correct    Boolean?
  position      Int?      @db.SmallInt
  order         Int       @db.SmallInt
  match_id      String?   @db.Uuid
  match_option  options?  @relation("optionsTooptions", fields: [match_id], references: [id], onUpdate: NoAction)
  other_options options[] @relation("optionsTooptions")
  question      questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id         String     @id(map: "profile_pkey") @db.Uuid
  role       user_role  @default(student)
  email      String     @unique
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  raw_user   Json
  attempts   attempts[]
  exams      exams[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model questions {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime      @default(now()) @db.Timestamptz(6)
  modified_at        DateTime      @default(now()) @db.Timestamptz(6)
  section_id         String        @db.Uuid
  content            String?
  grade              Float         @default(0) @db.Real
  order              Int
  type               question_type @default(single_choice)
  parent_question_id String?       @db.Uuid
  answers            answers[]
  options            options[]
  parent_question    questions?    @relation("questionsToquestions", fields: [parent_question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children_questions questions[]   @relation("questionsToquestions")
  section            sections      @relation(fields: [section_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sections {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  modified_at      DateTime           @default(now()) @db.Timestamptz(6)
  exam_id          String             @db.Uuid
  title            String
  description      String?
  time_limit       Int                @default(0)
  order            Int                @db.SmallInt
  attempt_sections attempt_sections[]
  questions        questions[]
  exam             exams              @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum question_type {
  single_choice
  multiple_choice
  true_false
  matching
  order_words
  order_sentences
  short_answer
  grouped
}

enum user_role {
  admin
  student
  lecturer
}
